= SimpleLocalization Plugin

This plugin supports a simple one language localization for Ruby on Rails. To make the plugin
more felxible and extendable the functionality is split into small "features". These features
are source files located in the <code>lib/features</code> directory of the plugin and each one
localizes a small part of Ruby on Rails.

This way you can choose the parts you want to have localized. This also avoids conflicts in
case you have already localized some parts of your application by other means. Currently this
plugin can localize the Date and Time classes, the Active Record error messages and even Active
Record model names and thier attributes. You'll find an overview of all features later in this
document.

To support a range of languages all language specific strings are extracted into language files.
These language files can be found in the +languages+ directory of the plugin and are written
in the YAML format. They also contain a little bit of meta information about the language files
author but this information is currently not used.


== Installation

Simply copy the plugin into your <code>vendor/plugins</code> directory and call the
+simple_localization+ method at the end of your <code>environment.rb</code>.

  simple_localization :language => :de

With this you're done. The <code>:language</code> parameter lets you define the language you want
to use. Just specify the name of the language file without the <code>.yml</code> extension as a
symbol or string. Currently only a german language file (named <code>de.yml</code>) exists though.


== Features and configuration

Like said before the functionality of this plugin is split into single features. By default all
features are loaded but <ou can choose which should be loaded or should not. This is also done by
the +simple_localization+ method.

  simple_localization :language => :de, :localized_strftime => false

Simply specify the name of the feature (like the file name but without the extension) as a
parameter and set it's value to +false+. The above example load all features except the
+localized_strftime+ feature. To make the feature selection easier the +simple_localization+
method supports the <code>:only</code> and <code>:except</code> parameters which are pretty
much self explaining.

  # Does the same as the first example
  simple_localization :language => :de, :except => :localized_strftime
  
  # Only loads the localized_strftime feature
  simple_localization :language => :de, :only => :localized_strftime

<code>:except</code> and <code>:only</code> also accept an array of features.

  simple_localization :language => :de, :except => [:localized_strftime, :localized_dates]


== Feature overview

This is just an overview of the available features. For more specify documentation take a
look at the individual feature files. You can find these files in the <code>lib/features</code>
directory of the plugin.


=== localized_models

File: lib/features/localized_models.rb

Extends ActiveRecord models to provide a way to specify localized names for models and thier
attributes. Asume the following model Computer has the attributes name, description, ip_address
and user.

  class Computer < ActiveRecord::Base
  	belongs_to :user
  	validates_presence_of :name, :ip_address, :user
  	
  	localized_names 'Der Computer',
  	  :name => 'Der Name',
  	  :description => 'Die Beschreibung',
  	  :ip_address => 'Die IP-Adresse',
  	  :user => 'Der Besitzer'
  end

This stores the localized (in this case german) name of the model and it's attributes in the model
class. The first parameter is the name of the model followed by a hash defining the localized names
for the attributes.

The feature also overwrites ActiveRecords +human_attribute_name+ method to return the localized
names if available. The model name can be accessed by the class method +localized_model_name+.

  Computer.localized_model_name               # => 'Der Computer'
  Computer.human_attribute_name(:ip_address)  # => 'Die IP-Adresse'


=== localized_error_messages

File: lib/features/localized_error_messages.rb

Overwrites the english Active Record error messages with localized ones from the language file. If the
user submits an invalid form these error messages and the attribute names of the corresponding model
are used to generate the shown error box detailing why the record is invalid.


=== localized_error_messages_for_helper

File: lib/features/localized_error_messages_for_helper.rb

Provides a more localized version of the +error_messages_for+ helper. Uses the language file to generate
the explaination paragraph of the error box. Makes it also possible to redefine the generated output using
an associated block.


=== localized_strftime

File: lib/features/localized_strftime.rb

Localizes the Time#strftime method by using the constants of the Date class. It's not perfect but
works. However you'll need localized Date class constants for this feature to have an effect. The
+localized_dates+ does this so you should use these two features together.

This feature is based on the work of Patrick Lenz: http://poocs.net/articles/2005/10/04/localization-for-rubys-time-strftime


=== localized_dates

File: lib/features/localized_dates.rb

Replaces the month and day name constants of the Date class with localized versions of the language
file.


=== class_based_field_error_proc

File: lib/features/class_based_field_error_proc.rb

This feature replaces the default ActionView field_error_proc which is responsible for
formating form fields with invalid input. The original one wraps invalid form fields into
and +div+ element of the class +fieldWithErrors+.

  <div class="fieldWithErrors"><input type="text" class="txt" ... /></div>

The new one just adds the class +invalid+ to the corresponding form field element.

  <input type="text" class="txt invalid" ... />

This feature is based on a code snippet of Duane Johnson found in the Rails wiki[http://wiki.rubyonrails.com/rails/pages/HowtoChangeValidationErrorDisplay].


== Extending the plugin with your language

It's very easy to define new languages for this plugin. All language specific strings
can be found in the language files. One file for each language. The language files are
written in YAML.

You can use the german language file <code>languages/de.yml</code> as a reference to
build your own. For example if you want to create a france language file you could just
copy <code>de.yml</code> to <code>fr.yml</code> and relpace the necessary strings.


== License

Copyright (c) 2006 Stephan Soller <stephan.soller@addcom.de>

The MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.